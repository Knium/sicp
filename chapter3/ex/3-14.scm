(load "../../lib.scm")

(define (loop x y)
  (if (null? x) y
    (let ((temp (cdr x)))
      (set-cdr! x y)
      (loop temp x))))
(define (mystery x)
  (loop x '()))

(trace loop)
(define v (list 'a 'b 'c 'd))
(define w (loop v '()))
(print v)
; CALL loop (a b c d) ()
;   CALL loop (b c d) (a)
;     CALL loop (c d) (b a)
;       CALL loop (d) (c b a)
;         CALL loop () (d c b a)
;         RETN loop (d c b a)
;       RETN loop (d c b a)
;     RETN loop (d c b a)
;   RETN loop (d c b a)
; RETN loop (d c b a)
