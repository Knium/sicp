これまではデータ抽象化をやってきた．
例えば有理数を使うプログラムを設計するというタスクを以前に行った．．
この時はconsなどのScheme自体が持っているプリミティブな手続きを用いて実装した.
その結果, xを分子, yを分母とした時(cons x y)で有理数を表現できた．
コンストラクタとセレクタ(make-rat, numer, denom)を実装したことによって
有理数をどう使うかというところと, 有理数がリスト構造で実装されている事実を抽象化した．
こんな感じに抽象化をやってきた

データオブジェクトの内部表現 (分子をnumerで取れるなど?)を分離することで，
大きなプログラムの設計を別々に行うことのできる小さなタスクの集まりに分解することができる．
しかし，この手のデータ抽象化はまだ十分に強力であるとは言えない
なぜなら，データ構造の内部表現というものがいつも意味があるとは限らないためである．

例をあげると, データオブジェクトの便利な表現方法が2つ以上あって，複数の表現を扱えるシステムを設計したいとする．
単純な例について考えると複素数は2種類のほぼ等価な方法，直行形式と極刑式によって現わせる．
実際に，複素数が両方の形式で表されて複素数を操作する手続きはどちらか一方の表現を扱うといったシステムも考えられる．

さらにプログラミングシステムは仕様変更を繰り返しながら，長時間にわたって大人数によって設計されるということがよくある．
そのような環境では，データ表現として何を選ぶかについて全員が合意するということはまずありえない．
つまり，データの表現を，実際にデータを使うところから分離するデータ抽象化に加えて
複数のデータ表現をそれぞれ分離し，１つのプラットフォーム上で共存させる抽象化が必要になる．
また，大きなプログラムは別々に設計されたすでに存在するモジュールを組み合わせて作られることが多く，
プログラマがモジュールを加法的にシステムに組み込むための規約が必要になる．

この節では，プログラムの部品によって違う方法で表現されるデータを扱うやり方について学ぶ．
そのためには，ジェネリック手続き(2種類以上の方法で表現されるデータを扱える手続き)を構築する必要がある．
ジェネリック手続きを構築するために今回使うテクニックは，タイプタグ(type tag)を持つデータオブジェクト,
つまりどのように処理されるべきかという情報を明示的に持っているデータオブジェクトを使う方法である．
また，データ主導プログラミングについても検討していく．
これは，ジェネリック演算によって加法的にシステムを組み立てていくための強力で便利な実装戦略である．

最初に単純な複素数の例を使ってタイプタグとデータ主導スタイルを使うことで，"複素数"データオブジェクトという抽象概念を維持したまま
複素数の表現として直行形式と極刑式を別々に設計できるということを見ていく．
これは，複素数がどのように表現されているかと独立した複素数の各部分にアクセスするジェネリックセレクタによって複素数の算術演算をを定義することによって，達成できる．

2.5節ではタイプタグとデータ主導スタイルを使ってジェネリック算術演算を開発するパッケージを開発するやり方を示す．
このシステムでは，すべての種類の数値を操作するのに使える手続き(add, mulなどを)提供し，新たな種類の数値が必要になったら簡単に拡張できるようになっている．
